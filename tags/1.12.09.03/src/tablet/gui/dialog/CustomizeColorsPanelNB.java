// Copyright 2009-2012 Information & Computational Sciences, JHI. All rights
// reserved. Use is subject to the accompanying licence terms.

package tablet.gui.dialog;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import java.util.*;
import javax.swing.*;

import tablet.gui.*;
import tablet.gui.viewer.*;
import tablet.gui.viewer.colors.*;

import scri.commons.gui.*;

class CustomizeColorsPanelNB extends javax.swing.JPanel
{
	private AssemblyPanel aPanel;

	public CustomizeColorsPanelNB(AssemblyPanel aPanel)
	{
		initComponents();

		this.aPanel = aPanel;

		TabletUtils.setPanelColor(this, false);

		RB.setText(label, "gui.dialog.CustomizeColorsPanelNB.label");

		initializeList();

		list.addMouseListener(new MouseAdapter() {
			public void mouseClicked(MouseEvent e) {
				if (e.getClickCount() == 2)
					selectColor(list);
			}
		});
	}

	void initializeList()
	{
		HashMap<String, Color> colors = ColorPrefs.getColors();
		DefaultListModel<EditableColor> model = new DefaultListModel<EditableColor>();

		ArrayList<String> keys = new ArrayList<String>();
		for (String key: colors.keySet())
			if (key.startsWith("User."))
				keys.add(key);
		Collections.sort(keys);

		for (String key: keys)
		{
			Color c = colors.get(key);
			model.addElement(new EditableColor(c, key));
		}

		list.setModel(model);
		list.setCellRenderer(new ColorListRenderer());
	}

	private void selectColor(JList list)
	{
		EditableColor ec = (EditableColor) list.getSelectedValue();
		if (ec == null) return;

		Color newColor = JColorChooser.showDialog(this,
				RB.getString("gui.dialog.CustomizeColorsPanelNB.dialog"),
				ec.color);

		if (newColor == null) return;

		// Update the color in the list
		ec.color = newColor;
		// And back in the hashmap (in ColorPrefs)
		ColorPrefs.getColors().put(ec.name, ec.color);

		// Refresh screen
		aPanel.forceRedraw();
	}

	static class ColorListRenderer extends DefaultListCellRenderer
	{
		// Set the attributes of the class and return a reference
		public Component getListCellRendererComponent(JList list, Object o,
				int i, boolean iss, boolean chf)
		{
			super.getListCellRendererComponent(list, o, i, iss, chf);

			EditableColor ec = (EditableColor) o;

			// Set the text
			setText(ec.name.substring(5));

			// Set the icon
			BufferedImage image = new BufferedImage(20, 10, BufferedImage.TYPE_INT_RGB);
			Graphics2D g = (Graphics2D) image.createGraphics();

			Color c1 = ec.color.brighter();
			Color c2 = ec.color.darker();

			g.setPaint(new GradientPaint(0, 0, c1, 20, 10, c2));
			g.fillRect(0, 0, 20, 10);
			g.setColor(Color.black);
			g.drawRect(0, 0, 20, 10);
			g.dispose();

			setIcon(new ImageIcon(image));

			return this;
		}

		public Insets getInsets(Insets i)
			{ return new Insets(0, 3, 0, 0); }
	}

	private static class EditableColor
	{
		public Color color;
		public String name;

		EditableColor(Color color, String name)
		{
			this.color = color;
			this.name = name;
		}

		public String toString()
		{
			return name;
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<EditableColor>();

        label.setText("Double click an entry to change its colour:");

        jScrollPane1.setViewportView(list);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(label))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label;
    private javax.swing.JList<EditableColor> list;
    // End of variables declaration//GEN-END:variables
}