package av.gui.viewer;

import java.awt.*;
import java.awt.event.*;
import java.text.*;
import javax.swing.*;
import javax.swing.event.*;

import av.gui.*;

class NBStatusPanel extends JPanel implements ActionListener, ChangeListener
{
	private DecimalFormat d1 = new DecimalFormat("0.0");
	private DecimalFormat d3 = new DecimalFormat("0.000");

	private AssemblyPanel aPanel;

	NBStatusPanel(AssemblyPanel aPanel)
	{
		this.aPanel = aPanel;

		initComponents();

		output1.setForeground(Color.red);
		output1.setText(" ");
		output2.setForeground(Color.red);
		output2.setText(" ");
		output3.setForeground(Color.red);
		output3.setText(" ");

		sliderX.addChangeListener(this);
		sliderX.setBackground((Color)UIManager.get("Panel.background"));
		sliderY.addChangeListener(this);
		sliderY.setBackground((Color)UIManager.get("Panel.background"));
		checkLink.addActionListener(this);
		checkLink.setBackground((Color)UIManager.get("Panel.background"));

		setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0));
		setControlStates();
		setForMainUse();
	}

	void setForMainUse()
	{
	}

	void setLabels(String str1, String str2, String str3)
	{
		if (str1 != null)
			output1.setText(str1);
		else
			output1.setText(" ");

		if (str2 != null)
			output2.setText(str2);
		else
			output2.setText(" ");

		if (str3 != null)
			output3.setText(str3);
		else
			output3.setText(" ");
	}

	// Toggles the state of the slider controls based on whether or not advanced
	// zoom has been turned on or off (which hides/changes text on the controls)
	public static void setControlStates()
	{
//		Prefs.visAdvancedZoom = false;

		if (Prefs.visAdvancedZoom)
			verticalLabel.setText("Vertical zoom:");
		else
		{
			verticalLabel.setText("Zoom:");
			Prefs.visLinkSliders = true;
		}

		horizontalLabel.setVisible(Prefs.visAdvancedZoom);
		sliderX.setVisible(Prefs.visAdvancedZoom);
		checkLink.setVisible(Prefs.visAdvancedZoom);
		checkLink.setSelected(Prefs.visLinkSliders);
	}

	public void actionPerformed(ActionEvent e)
	{
		Prefs.visLinkSliders = checkLink.isSelected();

		if (Prefs.visLinkSliders)
			sliderX.setValue(sliderY.getValue());
	}

	public void stateChanged(ChangeEvent e)
	{
		// Only force an update once (if linked, both sliders generate events,
		// remove the changeListener on the *other* slider first)

		// Horizontal slider events...
		if (e.getSource() == sliderX && Prefs.visLinkSliders)
		{
			sliderY.removeChangeListener(this);
			sliderY.setValue(sliderX.getValue());
			sliderY.addChangeListener(this);
		}

		// Vertical slider events...
		else if (e.getSource() == sliderY && Prefs.visLinkSliders)
		{
			sliderX.removeChangeListener(this);
			sliderX.setValue(sliderY.getValue());
			sliderX.addChangeListener(this);
		}

		aPanel.computePanelSizes();
	}

	int getZoomX()
		{ return sliderX.getValue(); }

	int getZoomY()
		{ return sliderY.getValue(); }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new javax.swing.JLabel();
        output1 = new javax.swing.JLabel();
        label2 = new javax.swing.JLabel();
        output2 = new javax.swing.JLabel();
        label3 = new javax.swing.JLabel();
        output3 = new javax.swing.JLabel();
        horizontalLabel = new javax.swing.JLabel();
        sliderX = new javax.swing.JSlider();
        checkLink = new javax.swing.JCheckBox();
        verticalLabel = new javax.swing.JLabel();
        sliderY = new javax.swing.JSlider();

        label1.setText("Label 1:");

        output1.setText("<>");

        label2.setText("Label 2:");

        output2.setText("<>");

        label3.setText("Label 3:");

        output3.setText("<>");

        horizontalLabel.setLabelFor(sliderX);
        horizontalLabel.setText("Horizontal zoom:");

        sliderX.setMaximum(25);
        sliderX.setMinimum(1);
        sliderX.setPaintTicks(true);
        sliderX.setSnapToTicks(true);
        sliderX.setValue(7);

        checkLink.setText("Link");

        verticalLabel.setLabelFor(sliderY);
        verticalLabel.setText("Vertical zoom:");

        sliderY.setMaximum(25);
        sliderY.setMinimum(1);
        sliderY.setPaintTicks(true);
        sliderY.setSnapToTicks(true);
        sliderY.setValue(7);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(label3)
                    .add(label1)
                    .add(label2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(output3)
                    .add(output2)
                    .add(output1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 112, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(horizontalLabel)
                    .add(sliderX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 155, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(checkLink)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(sliderY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 155, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(verticalLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(layout.createSequentialGroup()
                            .add(label1)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(label2)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(label3))
                        .add(layout.createSequentialGroup()
                            .add(output1)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(output2)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(output3)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(horizontalLabel)
                            .add(verticalLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(sliderX, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(sliderY, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(checkLink)))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JCheckBox checkLink;
    private static javax.swing.JLabel horizontalLabel;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JLabel label3;
    javax.swing.JLabel output1;
    javax.swing.JLabel output2;
    javax.swing.JLabel output3;
    private static javax.swing.JSlider sliderX;
    private static javax.swing.JSlider sliderY;
    private static javax.swing.JLabel verticalLabel;
    // End of variables declaration//GEN-END:variables
}